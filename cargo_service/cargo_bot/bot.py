
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = "7671224104:AAGO1E0ssPTXjko_Ji7n3w0l3S8B52EeWzQ"
DRIVERS_GROUP_ID = "@Cargo_Service_Driver"
SALT = "Zador-74622"


import asyncio
import hashlib
import re
import uuid
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest, TelegramAPIError
from aiogram.filters import Command
import logging
from django.conf import settings
from django.utils import timezone

from django.db import close_old_connections
from asgiref.sync import sync_to_async
from django.core.exceptions import ObjectDoesNotExist

# –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è SQLite
import sqlite3
from sqlite3 import Error

from cargo_bot.models import User, Cargo, Company, Manager, Customer
ukraine_cities = [
    "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏—è",
    "–ê–ª—á–µ–≤—Å–∫",
    "–ê–ª–µ—à–∫–∏",
    "–ë–∞—Ö–º—É—Ç",
    "–ë–µ—Ä–¥—è–Ω—Å–∫",
    "–ë–µ–ª–∞—è –¶–µ—Ä–∫–æ–≤—å",
    "–ë–æ—Ä–∏—Å–ø–æ–ª—å",
    "–ë—Ä–æ–≤–∞—Ä—ã",
    "–í–∏–Ω–Ω–∏—Ü–∞",
    "–ì–æ—Ä–ª–æ–≤–∫–∞",
    "–î–Ω–µ–ø—Ä",
    "–î—Ä—É–∂–∫–æ–≤–∫–∞",
    "–ï–≤–ø–∞—Ç–æ—Ä–∏—è",
    "–ñ–∏—Ç–æ–º–∏—Ä",
    "–ñ–µ–ª—Ç—ã–µ –í–æ–¥—ã",
    "–ó–∞–ø–æ—Ä–æ–∂—å–µ",
    "–ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫",
    "–ò—Ä–ø–µ–Ω—å",
    "–ö–∞–º–µ–Ω–µ—Ü-–ü–æ–¥–æ–ª—å—Å–∫–∏–π",
    "–ö–∞–º–µ–Ω—Å–∫–æ–µ",
    "–ö–µ—Ä—á—å",
    "–ö–∏–µ–≤",
    "–ö–æ–ª–æ–º—ã—è",
    "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∫–∞",
    "–ö—Ä–∞–º–∞—Ç–æ—Ä—Å–∫",
    "–ö—Ä–∏–≤–æ–π –†–æ–≥",
    "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü–∫–∏–π",
    "–õ–∏—Å–∏—á–∞–Ω—Å–∫",
    "–õ–æ–∑–æ–≤–∞—è",
    "–õ—É—Ü–∫",
    "–õ—å–≤–æ–≤",
    "–ú–∞—Ä–∏—É–ø–æ–ª—å",
    "–ú–µ–ª–∏—Ç–æ–ø–æ–ª—å",
    "–ú—É–∫–∞—á–µ–≤–æ",
    "–ù–∏–∫–æ–ª–∞–µ–≤",
    "–ù–∏–∫–æ–ø–æ–ª—å",
    "–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫",
    "–ù–µ—Ç–∏—à–∏–Ω",
    "–û–±—É—Ö–æ–≤",
    "–û–¥–µ—Å—Å–∞",
    "–ü–∞–≤–ª–æ–≥—Ä–∞–¥",
    "–ü–æ–ª—Ç–∞–≤–∞",
    "–†–æ–≤–Ω–æ",
    "–°–µ–≤–µ—Ä–æ–¥–æ–Ω–µ—Ü–∫",
    "–°–µ–≤–µ—Ä—Å–∫",
    "–°–ª–∞–≤—è–Ω—Å–∫",
    "–°—Ç–∞—Ö–∞–Ω–æ–≤",
    "–°—É–º—ã",
    "–¢–µ—Ä–Ω–æ–ø–æ–ª—å",
    "–£–∂–≥–æ—Ä–æ–¥",
    "–£–º–∞–Ω—å",
    "–§–∞—Å—Ç–æ–≤",
    "–•–∞—Ä—å–∫–æ–≤",
    "–•–µ—Ä—Å–æ–Ω",
    "–ß–µ—Ä–∫–∞—Å—Å—ã",
    "–ß–µ—Ä–Ω–æ–≤—Ü—ã",
    "–ß–µ—Ä–Ω–∏–≥–æ–≤",
    "–ß–µ—Ä–≤–æ–Ω–æ–≥—Ä–∞–¥",
    "–®–æ—Å—Ç–∫–∞",
    "–Ø–ª—Ç–∞"
]
truck_types = [
    "üöõ –¢–µ–Ω—Ç/—Ñ—É—Ä–∞",
    "‚ùÑÔ∏è –†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä",
    "üßä –ò–∑–æ—Ç–µ—Ä–º",
    "üõª –û—Ç–∫—Ä—ã—Ç–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
    "üõ¢Ô∏è –ê–≤—Ç–æ—Ü–∏—Å—Ç–µ—Ä–Ω–∞",
    "üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–æ–∑",
    "üîª –ù–∏–∑–∫–æ—Ä–∞–º–Ω—ã–π —Ç—Ä–∞–ª",
    "‚õèÔ∏è –°–∞–º–æ—Å–≤–∞–ª—å–Ω—ã–π –ø–æ–ª—É–ø—Ä–∏—Ü–µ–ø",
    "ü™µ –õ–µ—Å–æ–≤–æ–∑",
    "üåæ –ó–µ—Ä–Ω–æ–≤–æ–∑",
    "üêÑ –ñ–∏–≤–æ—Ç–Ω–æ–≤–æ–∑",
    "üöó –ê–≤—Ç–æ–≤–æ–∑",
    "‚ôªÔ∏è –ú—É–ª—å—Ç–∏–ª–∏—Ñ—Ç",
    "üèóÔ∏è –¢—è–∂–µ–ª–æ–≤–æ–∑",
    "üß™ –¶–µ–º–µ–Ω—Ç–æ–≤–æ–∑",
    "üî• –ì–∞–∑–æ–≤–æ–∑",
    "ü•õ –ú–æ–ª–æ–∫–æ–≤–æ–∑",
    "üìÉ –ü–ª–æ—â–∞–¥–∫–∞ –±–µ–∑ –±–æ—Ä—Ç–æ–≤",
    "üõ†Ô∏è –°–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∞",
    "üõéÔ∏è –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–≤—Ç–æ–±—É—Å",
    "üèçÔ∏è –ú–æ—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–≤–æ–∑–∫–∞",
    "üìØ –ü–µ—Ä–µ–≤–æ–∑–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ (ADR)",
    "üß± –ü–µ—Ä–µ–≤–æ–∑–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
]
payment_methods = [
    "üíµ –ù–∞–ª–∏—á–Ω—ã–µ",
    "üí≥ –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ",
    "üí∏ –ü–µ—Ä–µ–≤–æ–¥",
    "üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥",
    "üí± –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
    "üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏",
    "üíª –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞",
    "üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥",
    "üí≥ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞",
    "üì≤ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
    "üõí –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω",
    "üèß –°–Ω—è—Ç–∏–µ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–º–∞—Ç",
    "üéÅ –û–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞–º–∏",
    "üßæ –û–ø–ª–∞—Ç–∞ —á–µ–∫–∞–º–∏",
    "üì§ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏",
    "üíº –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–∏–∑–Ω–µ—Å-—Å—á—ë—Ç",
    "üîÅ –û–±–º–µ–Ω –≤–∞–ª—é—Ç",
    "üìú –û–ø–ª–∞—Ç–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É",
    "üè† –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫–∞—Å—Å—É",
    "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞",
    "üéâ –ê–∫—Ü–∏–∏/—Å–∫–∏–¥–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É"
]
currency_methods = [
    "USD üá∫üá∏", "EUR üá™üá∫", "UAH üá∫üá¶", "GBP üá¨üáß",
    "PLN üáµüá±", "CHF üá®üá≠", "CAD üá®üá¶", "AUD üá¶üá∫",
    "CNY üá®üá≥", "JPY üáØüáµ", "TRY üáπüá∑", "AED üá¶üá™",
    "SEK üá∏üá™", "NOK üá≥üá¥", "CZK üá®üáø", "HUF üá≠üá∫",
    "ILS üáÆüá±", "SGD üá∏üá¨", "INR üáÆüá≥", "BRL üáßüá∑",
    "MXN üá≤üáΩ", "KRW üá∞üá∑", "SAR üá∏üá¶", "ZAR üáøüá¶",
    "RUB üá∑üá∫", "MYR üá≤üáæ", "PHP üáµüá≠", "THB üáπüá≠",
    "IDR üáÆüá©", "EGP üá™üá¨", "PKR üáµüá∞", "TWD üáπüáº",
    "COP üá®üá¥", "NGN üá≥üá¨", "VND üáªüá≥", "UAH üá∫üá¶"
]


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑")],
        [KeyboardButton(text="üëÄ –ú–æ–∏ –≥—Ä—É–∑—ã")]
    ],
    resize_keyboard=True
)

# –ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
confirm_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
    ],
    resize_keyboard=True
)

# –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ"), KeyboardButton(text="üöõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ"), KeyboardButton(text="üè¢ –ö–æ–º–ø–∞–Ω–∏—è")],
        [KeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω"), KeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∞")],
        [KeyboardButton(text="üöõ –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"), KeyboardButton(text="üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã")],
        [KeyboardButton(text="üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

truck_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=truck)] for truck in sorted(truck_types)],
    resize_keyboard=True
)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
payment_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=payment)] for payment in sorted(payment_methods)],
    resize_keyboard=True
)

ukraine_cities_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=city)] for city in sorted(ukraine_cities)],
    resize_keyboard=True
)
# ukraine_cities_menu.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
currency_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=currency)] for currency in sorted(currency_methods)],
    resize_keyboard=True
)



def format_cargo_data(cargo: Cargo) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return (
        f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {cargo.name}\n"
        f"üöõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {cargo.origin}\n"
        f"üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {cargo.destination}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {cargo.company.company_name if cargo.company else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {cargo.phone}\n"
        f"üí∞ –û–ø–ª–∞—Ç–∞: {cargo.payment} {cargo.currency}\n"
        f"üöõ –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {cargo.truck}\n"
        f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {cargo.payment_method}\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {cargo.description}\n"
        f"üîë –ù–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {cargo.shipment_id}"
    )


def hash_data(data: str) -> str:
    return hashlib.sha256((data + SALT).encode()).hexdigest()


@sync_to_async
def get_or_create_user(tg_user: types.User):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django"""
    try:
        user = User.objects.get(id=tg_user.id)
    except User.DoesNotExist:
        username = tg_user.username or f"tg_user_{tg_user.id}"
        user = User.objects.create_user(
            id=tg_user.id,
            username=username,
            email=f"{username}@example.com",
            password=str(uuid.uuid4()),
            first_name=tg_user.first_name or '',
            last_name=tg_user.last_name or '',
            role='manager'
        )
    return user


@sync_to_async
def get_cargo_by_id(shipment_id: str, user_id: int) -> Cargo:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –ø–æ ID"""
    try:
        cargo = Cargo.objects.get(shipment_id=shipment_id, user_id=user_id)
        return cargo
    except Cargo.DoesNotExist:
        logger.warning(f"–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: shipment_id={shipment_id}")
        raise ValueError("–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")


@sync_to_async
def get_user_cargos(user_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return list(Cargo.objects.filter(user_id=user_id).select_related('company'))


async def save_cargo_to_db(user_id: int, data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –≤ –ë–î"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.get(id=user_id)

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        manager = None
        try:
            manager = Manager.objects.get(user=user)
        except Manager.DoesNotExist:
            pass

        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–∑
        cargo = Cargo.objects.create(
            name=data['name'],
            origin=data['origin'],
            destination=data['destination'],
            description=data['description'],
            phone=data['phone'],
            payment=data['payment'],
            currency=data.get('currency', 'USD'),
            truck=data.get('truck', '–¢–µ–Ω—Ç/—Ñ—É—Ä–∞'),
            payment_method=data.get('payment_method', '–ù–∞–ª–∏—á–Ω—ã–µ'),
            user=user,
            company=data.get('company_obj'),
            created_at=data.get('created_at', timezone.now())
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
        message_id = await send_to_drivers_channel(cargo)
        if message_id:
            cargo.message_id = message_id
            cargo.save()

        return cargo
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        raise


@sync_to_async
def delete_cargo_from_db(shipment_id: str, user_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ –ë–î –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ"""
    try:
        cargo = Cargo.objects.get(shipment_id=shipment_id, user_id=user_id)
        message_id = cargo.message_id
        cargo.delete()
        return message_id  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    except Cargo.DoesNotExist:
        logger.warning(f"–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {shipment_id}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞: {e}")
        raise



def update_cargo_field_sync(shipment_id: str, user_id: int, field: str, value):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –≥—Ä—É–∑–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è sync_to_async)"""
    try:
        cargo = Cargo.objects.get(shipment_id=shipment_id, user_id=user_id)
        setattr(cargo, field, value)
        cargo.save()
        return cargo
    except Cargo.DoesNotExist:
        raise ValueError("–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞: {e}")
        raise

update_cargo_field = sync_to_async(update_cargo_field_sync)


async def send_to_drivers_channel(cargo: Cargo):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥—Ä—É–∑–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    driver_message = (
        f"üöõ –ù–æ–≤—ã–π –≥—Ä—É–∑ –¥–æ—Å—Ç—É–ø–µ–Ω!\n\n"
        f"üì¶ –ì—Ä—É–∑: {cargo.name}\n"
        f"üìç –ú–∞—Ä—à—Ä—É—Ç: {cargo.origin} ‚Üí {cargo.destination}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {cargo.company.company_name if cargo.company else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üí∞ –û–ø–ª–∞—Ç–∞: {cargo.payment} {cargo.currency}\n"
        f"üöõ –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {cargo.truck}\n"
        f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {cargo.payment_method}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {cargo.phone}\n"
        f"üìù –î–µ—Ç–∞–ª–∏: {cargo.description}\n"
        f"üîë –ù–æ–º–µ—Ä: {str(cargo.shipment_id)[:5]}"
    )

    builder = InlineKeyboardBuilder()
    if cargo.phone.startswith('@'):
        builder.button(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å", url=f"https://t.me/{cargo.phone[1:]}")
    else:
        clean_phone = re.sub(r'[^\d]', '', cargo.phone)
        builder.button(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url=f"https://t.me/share/phone?phone={clean_phone}")

    try:
        sent_message = await bot.send_message(
            chat_id=DRIVERS_GROUP_ID,
            text=driver_message,
            reply_markup=builder.as_markup()
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ
        await sync_to_async(cargo.save)()
        return sent_message.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º: {e}")
        return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start(message: Message):
    # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Django
    user = await get_or_create_user(message.from_user)

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )


@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑")
async def add_cargo(message: Message):
    user_data[message.from_user.id] = {"state": "adding", "data": {}}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞:")


@dp.message(lambda message: message.text == "üëÄ –ú–æ–∏ –≥—Ä—É–∑—ã")
async def show_cargos(message: Message):
    user_id = message.from_user.id
    cargos = await get_user_cargos(user_id)

    if not cargos:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤.")
        return

    await message.answer("üì¶ –í–∞—à–∏ –≥—Ä—É–∑—ã:")

    for cargo in cargos:
        msg = (
            f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {cargo.name}\n"
            f"üöö –ú–∞—Ä—à—Ä—É—Ç: {cargo.origin} ‚Üí {cargo.destination}\n"
            f"üöõ –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {cargo.truck}\n"
            f"üíµ –û–ø–ª–∞—Ç–∞: {cargo.payment} {cargo.currency}"
            f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {cargo.payment_method}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {cargo.description}\n"
            f"üîë –ù–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {cargo.shipment_id}"
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{cargo.shipment_id}")
        builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{cargo.shipment_id}")

        await message.answer(msg, reply_markup=builder.as_markup())


@dp.callback_query(lambda c: c.data.startswith('delete_'))
async def delete_cargo(callback: CallbackQuery):
    shipment_id = callback.data.replace('delete_', '')
    user_id = callback.from_user.id

    try:
        message_id = await delete_cargo_from_db(shipment_id, user_id)
        if message_id is not None:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π
            try:
                await bot.delete_message(chat_id=DRIVERS_GROUP_ID, message_id=message_id)
            except TelegramBadRequest as e:
                if "message to delete not found" in str(e):
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ")
                elif "message can't be deleted" in str(e):
                    logger.info("–ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 48 —á–∞—Å–æ–≤, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å")
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            except TelegramAPIError as e:
                logger.error(f"–û—à–∏–±–∫–∞ API Telegram –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            await callback.answer("–ì—Ä—É–∑ —É–¥–∞–ª–µ–Ω", show_alert=True)
            await callback.message.delete()
        else:
            await callback.answer("–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)


@dp.callback_query(lambda c: c.data.startswith('edit_'))
async def edit_cargo(callback: CallbackQuery):
    shipment_id = callback.data.replace('edit_', '')
    user_id = callback.from_user.id

    try:
        cargo = await get_cargo_by_id(shipment_id, user_id)
        user_data[user_id] = {
            "state": "editing",
            "data": cargo,
            "shipment_id": shipment_id
        }
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=edit_menu
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(lambda message: message.text in ["üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ", "üöõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
                                             "üè¢ –ö–æ–º–ø–∞–Ω–∏—è", "üìû –¢–µ–ª–µ—Ñ–æ–Ω", "üí∞ –û–ø–ª–∞—Ç–∞",
                                             "üöõ –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", "üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", "üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
async def edit_field(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data or user_data[user_id]["state"] != "editing":
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", reply_markup=main_menu)
        return

    field_map = {
        "üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ": "name",
        "üöõ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "origin",
        "üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ": "destination",
        "üè¢ –ö–æ–º–ø–∞–Ω–∏—è": "company",
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω": "phone",
        "üí∞ –û–ø–ª–∞—Ç–∞": "payment",
        "üöõ –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞": "truck",
        "üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã": "payment_method",
        "üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": "description"
    }

    field = field_map[message.text]
    user_data[user_id]["edit_field"] = field

    if field == "truck":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=truck_menu)
    elif field == "payment_method":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_menu)
    elif field == "payment":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:", reply_markup=currency_menu)
    else:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {message.text}:", reply_markup=types.ReplyKeyboardRemove())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
@dp.message()
async def handle_input(message: Message):
    user_id = message.from_user.id
    text = message.text

    if user_id not in user_data:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", reply_markup=main_menu)
        return

    if user_data[user_id]["state"] == "adding":
        await handle_add_cargo(message)
    elif user_data[user_id]["state"] == "editing" and "edit_field" in user_data[user_id]:
        await handle_edit_field(message)


# async def handle_add_cargo(message: Message):
#     user_id = message.from_user.id
#     text = message.text
#     data = user_data[user_id]["data"]
#
#     if "name" not in data:
#         if 2 <= len(text) <= 100:
#             data["name"] = text
#             await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
#         else:
#             await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2-100 —Å–∏–º–≤–æ–ª–æ–≤")
#     elif "origin" not in data:
#         data["origin"] = text
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
#     elif "destination" not in data:
#         data["destination"] = text
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
#     elif "company" not in data:
#         if 2 <= len(text) <= 100:
#             data["company"] = text
#             keyboard = ReplyKeyboardMarkup(
#                 keyboard=[
#                     [KeyboardButton(text="üì± –í–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ (+380...)")],
#                     [KeyboardButton(text="üì≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram")]
#                 ],
#                 resize_keyboard=True
#             )
#             await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∫–æ–Ω—Ç–∞–∫—Ç–∞:", reply_markup=keyboard)
#         else:
#             await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2-100 —Å–∏–º–≤–æ–ª–æ–≤")
#     elif "phone" not in data:
#         if message.text == "üì≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram":
#             if message.from_user.username:
#                 data["phone"] = f"@{message.from_user.username}"
#                 await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:", reply_markup=currency_menu)
#             else:
#                 await message.answer("–£ –≤–∞—Å –Ω–µ—Ç username. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ (+380...):")
#         elif re.match(r"^\+?[1-9]\d{1,14}$", text):
#             data["phone"] = text
#             await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:", reply_markup=currency_menu)
#         else:
#             await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ (+380...)")
#     elif "payment" not in data:
#         try:
#             payment = float(text)
#             if payment > 0:
#                 data["payment"] = payment
#                 await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –æ–ø–ª–∞—Ç—ã:", reply_markup=currency_menu)
#             else:
#                 await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0")
#         except ValueError:
#             await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
#     elif "currency" not in data and text in ["USD", "EUR", "UAH"]:
#         data["currency"] = text
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=truck_menu)
#     elif "truck" not in data and text in ["–¢–µ–Ω—Ç/—Ñ—É—Ä–∞", "–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä", "–ò–∑–æ—Ç–µ—Ä–º", "–û—Ç–∫—Ä—ã—Ç–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "–ê–≤—Ç–æ—Ü–∏—Å—Ç–µ—Ä–Ω–∞"]:
#         data["truck"] = text
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_menu)
#     elif "payment_method" not in data and text in ["–ù–∞–ª–∏—á–Ω—ã–µ", "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ", "–ü–µ—Ä–µ–≤–æ–¥"]:
#         data["payment_method"] = text
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
#     elif "description" not in data:
#         if len(text) <= 500:
#             data["description"] = text
#
#             try:
#                 # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞
#                 company_name = data.get('company')
#                 if company_name:
#                     company, _ = await sync_to_async(Company.objects.get_or_create)(company_name=company_name)
#                     data['company_obj'] = company
#
#                 # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–∑ –≤ –ë–î
#                 cargo = await save_cargo_to_db(user_id, data)
#
#                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º
#                 await send_to_drivers_channel(cargo)
#
#                 await message.answer(
#                     f"‚úÖ –ì—Ä—É–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n{format_cargo_data(cargo)}",
#                     reply_markup=main_menu
#                 )
#                 del user_data[user_id]
#             except Exception as e:
#                 logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
#                 await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", reply_markup=main_menu)
#         else:
#             await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å 500 —Å–∏–º–≤)")
async def handle_add_cargo(message: Message):
    user_id = message.from_user.id
    text = message.text
    data = user_data[user_id]["data"]

    if "name" not in data:
        if 2 <= len(text) <= 100:
            data["name"] = text
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=ukraine_cities_menu)
        else:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2-100 —Å–∏–º–≤–æ–ª–æ–≤")
    elif "origin" not in data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
        if text in ukraine_cities:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
            data["origin"] = text
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=ukraine_cities_menu)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –∫–Ω–æ–ø–æ–∫", reply_markup=ukraine_cities_menu)
    elif "destination" not in data:
        if text in ukraine_cities:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
            data["destination"] = text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –∫–Ω–æ–ø–æ–∫", reply_markup=ukraine_cities_menu)
    elif "company" not in data:
        if 2 <= len(text) <= 100:
            data["company"] = text
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üì± –í–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ (+380...)")],
                    [KeyboardButton(text="üì≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram")]
                ],
                resize_keyboard=True
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∫–æ–Ω—Ç–∞–∫—Ç–∞:", reply_markup=keyboard)
        else:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2-100 —Å–∏–º–≤–æ–ª–æ–≤")
    elif "phone" not in data:
        if text == "üì≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram":
            if message.from_user.username:
                data["phone"] = f"@{message.from_user.username}"
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:", reply_markup=currency_menu)
            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç username. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ (+380...):")
        elif re.match(r"^\+?[1-9]\d{1,14}$", text):
            data["phone"] = text
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:") #, reply_markup=currency_menu
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ (+380...)")
    elif "payment" not in data:
        try:
            payment = float(text)
            if payment > 0:
                data["payment"] = payment
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –æ–ø–ª–∞—Ç—ã:", reply_markup=currency_menu)
            else:
                await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0")
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç–∏")
    elif "currency" not in data and text in payment_methods:
        data["currency"] = text
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=truck_menu)
    elif "truck" not in data and text in truck_types:
        data["truck"] = text
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_menu)
    elif "payment_method" not in data and text in currency_methods:
        data["payment_method"] = text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    elif "description" not in data:
        if len(text) <= 500:
            data["description"] = text

            try:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
                company_name = data.get('company')
                if company_name:
                    company, _ = await sync_to_async(Company.objects.get_or_create)(company_name=company_name)
                    data['company_obj'] = company

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–∑ –≤ –ë–î
                cargo = await save_cargo_to_db(user_id, data)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º
                await send_to_drivers_channel(cargo)

                await message.answer(
                    f"‚úÖ –ì—Ä—É–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n{format_cargo_data(cargo)}",
                    reply_markup=main_menu
                )
                del user_data[user_id]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", reply_markup=main_menu)
        else:
            await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å 500 —Å–∏–º–≤–æ–ª–æ–≤)")

async def handle_edit_field(message: Message):

        user_id = message.from_user.id
        text = message.text
        field = user_data[user_id]["edit_field"]
        shipment_id = user_data[user_id]["shipment_id"]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
        valid = True
        if field == "name" and not (2 <= len(text) <= 100):
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2-100 —Å–∏–º–≤–æ–ª–æ–≤")
            valid = False
        elif field == "company" and not (2 <= len(text) <= 100):
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2-100 —Å–∏–º–≤–æ–ª–æ–≤")
            valid = False
        elif field == "phone" and not re.match(r"^\+?[1-9]\d{1,14}$", text) and not text.startswith("@"):
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username")
            valid = False
        elif field == "payment":
            try:
                amount = float(text)
                if amount <= 0:
                    await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0")
                    valid = False
                else:
                    text = amount
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                valid = False
        elif field == "description" and len(text) > 500:
            await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å 500 —Å–∏–º–≤)")
            valid = False
        elif field == "truck" and text not in ["–¢–µ–Ω—Ç/—Ñ—É—Ä–∞", "–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä", "–ò–∑–æ—Ç–µ—Ä–º", "–û—Ç–∫—Ä—ã—Ç–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "–ê–≤—Ç–æ—Ü–∏—Å—Ç–µ—Ä–Ω–∞"]:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑ –º–µ–Ω—é")
            valid = False
        elif field == "payment_method" and text not in ["–ù–∞–ª–∏—á–Ω—ã–µ", "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ", "–ü–µ—Ä–µ–≤–æ–¥"]:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ –º–µ–Ω—é")
            valid = False
        elif field == "currency" and text not in ["USD", "EUR", "UAH"]:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –º–µ–Ω—é")
            valid = False

        if not valid:
            return

        try:
            if field == "company":
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
                await sync_to_async(close_old_connections)()
                company_obj, _ = await sync_to_async(Company.objects.get_or_create)(company_name=text)
                await sync_to_async(close_old_connections)()
                cargo = await update_cargo_field(shipment_id, user_id, 'company', company_obj)
                await message.answer(
                    f"‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n{format_cargo_data(cargo)}",
                    reply_markup=main_menu
                )
                del user_data[user_id]
                return
            else:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
                await sync_to_async(close_old_connections)()
                cargo = await update_cargo_field(shipment_id, user_id, field, text)
                await message.answer(
                    f"‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n{format_cargo_data(cargo)}",
                    reply_markup=main_menu
                )
                del user_data[user_id]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            await message.answer(f"‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=main_menu)


async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())